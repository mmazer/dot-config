kp(){
    if [ -z "$1" ]; then
        kubectl get pods
    else
       kubectl get pod/$1 -o yaml
    fi
}

kd() {
    if [ -z "$1" ]; then
        kubectl get deployments
    else
        kubectl get deployment/$1 -o yaml
    fi
}

km() {
    if [ -z "$1" ]; then
        kubectl get configmaps
    else
        kubectl get configmap/$1 -o yaml
    fi
}

kshell() {
    if [ $# -ne 2 ]; then
        echo "kshell <image> <name>"
    else
        kubectl run -i --rm --tty $2 --image="$1"  --restart=Never -- bash
    fi
}

ktools() { 
    local name image
    name=${USER}-toolbox
    image=${TOOLBOX_DOCKER_IMAGE:-gcr.io/google-containers/toolbox}
    echo "Running pod $name using image $image"
    kubectl run -i --rm --tty "$name" --image="$image" --restart=Never -- bash
}


kns(){
    if [ -z "$1" ]; then
        kubectl config view | grep namespace
    else
       kubectl config set-context $(kubectl config current-context) --namespace=$1
    fi
}

ke() {
    if [ -z "$1" ]; then
        kubectl get events
    else
       kubectl get events --namespace="$1"
    fi

}

# Get container image versions for a deployment
# Accepts and applies any provided kubectl options
ki() {
    local deployment=$1
    if [ -z "$deployment" ]; then
        echo "ki <deployment>"
    else
        kubectl get deployment $deployment \
            -o jsonpath='{.spec.template.spec.containers[*].image}' | awk -v OFS="\n" '{$1=$1}1'
    fi
}

# get pod container images
pi() {
    local opts="$@"
    kubectl get pods ${opts} \
        -o=jsonpath='{range .items[*]}{"\n"}{.metadata.name}{":\t"}{range .spec.containers[*]}{.image}{", "}{end}{end}' | \
        sort
}

redeploy() {
    local deployment=$1
    if [ -z "$deployment" ]; then
        echo "redeploy <deployment>"
    else
        kubectl patch deployment ${deployment} -p "{\"spec\": {\"template\": {\"metadata\": { \"labels\": {  \"redeployed-at\": \"$(date +%s)\"}}}}}"
    fi
}
alias kube='kubectl'
alias kb='kubectl'
alias kdel='kubectl delete'
alias kget='kubectl get'
export TOOLBOX_DOCKER_IMAGE="gcr.io/google-containers/toolbox"

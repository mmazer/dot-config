set -g prefix C-a
set -g default-terminal "screen-256color"
set -g default-command "reattach-to-user-namespace-wrapper -l ${SHELL}"
set-option -g update-environment "TERM_THEME TERM_BG"

set -sg escape-time 0

# use starting index 1 for windows and panes
set -g base-index 1
setw -g pane-base-index 1
set -g display-panes-time 2000 

# loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-option -g bell-action none

# history
set-option -g history-limit 3000

# mouse
set-window-option -g mouse off

# window Splitting
unbind %
bind | split-window -h
bind - split-window -v

# vim like bindings
# use "v" and "s" to do vertical/horizontal splits, like vim
bind s split-window -v
bind v split-window -h

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\ select-pane -l
bind-key / display-panes \; select-pane -t :.

# cycle through windows
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# use vim motion keys while in copy mode
setw -g mode-keys vi

# reload tmux conf
bind r source-file ~/.tmux.conf \; display "configuration reloaded"

# misc key bindings
bind C-a send-prefix
bind K confirm kill-window

# restore bash completion
unbind -n Tab

# use the vim resize keys.
# the number at the end is how much the pane will be resized,
# and 1 is fairly small -- you might want to tweak this.
bind < resize-pane -L 10
bind > resize-pane -R 10
bind - resize-pane -D 10
bind + resize-pane -U 10

### layout and colors

# modes {
setw -g clock-mode-colour colour244
setw -g mode-attr bold
setw -g mode-fg colour196
setw -g mode-bg colour238
# }

# panes {
set -g pane-border-bg colour235
set -g pane-border-fg colour238
set -g pane-active-border-bg colour236
set -g pane-active-border-fg colour51
# }

# statusbar {
set -g status-position bottom
set -g status-justify centre
set -g status-interval 2
set -g status-bg colour234
set -g status-fg colour247
set -g status-attr dim
set -g status-left '#S@#h'
set -g status-right '#(date "+%b %d %%H:%%M:%%S") (UTC #(TZ="UTC" date +%%H:%%M))'
set -g status-right-length 40
set -g status-left-length 40

setw -g window-status-current-fg colour253
setw -g window-status-current-format '#I #W:#P'

setw -g window-status-attr none
setw -g window-status-format '#I:#W #F'

setw -g window-status-bell-attr bold
setw -g window-status-bell-fg colour255
setw -g window-status-bell-bg colour1
# }

# messages {
set -g message-fg black
set -g message-bg yellow
set -g message-command-fg blue
set -g message-command-bg black
# }
